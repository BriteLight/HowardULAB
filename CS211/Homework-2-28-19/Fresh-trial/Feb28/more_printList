Script started on Sat, Mar 02, 2019  5:00:30 PM
Identity added: /home/Brad/.ssh/other_pubs//Tamyen/accord.pem (/home/Brad/.ssh/other_pubs//Tamyen/accord.pem)
Identity added: /home/Brad/.ssh/other_pubs//Rumsen/discord.pem (/home/Brad/.ssh/other_pubs//Rumsen/discord.pem)
Identity added: /home/Brad/.ssh/other_pubs//ripcord.pem (/home/Brad/.ssh/other_pubs//ripcord.pem)
[Brad@Computer2 ~]$ 
[Brad@Computer2 ~]$ 
[Brad@Computer2 ~]$ 
[Brad@Computer2 ~]$ 
[Brad@Computer2 ~]$ cat tooling/example-samples/bb_dirs/b_acedemia/HowardULAB/Junior-Jolly-June/CS211/Homework-2-28-19/Fresh- trial/dublyLL.cpp 
// A complete working C program to demostrate all
// insertion before a given node
#include <stdio.h>
#include <stdlib.h>

// A linked list node
struct Node {
    int data;
    struct Node* next;
    struct Node* prev;
};

/* Given a reference (pointer to pointer) to the head of a list
and an int, inserts a new node on the front of the list. */
void push(struct Node** head_ref, int new_data)
{
    struct Node* new_node = (struct Node*)malloc(sizeof(struct Node));

    new_node->data = new_data;

    new_node->next = (*head_ref);
    new_node->prev = NULL;

    if ((*head_ref) != NULL)
        (*head_ref)->prev = new_node;

    (*head_ref) = new_node;
}

/* Given a node as next_node, insert a new node before the given node */
void insertBefore(struct Node** head_ref, struct Node* next_node, int new_data)
{
    /*1. check if the given next_node is NULL */
    if (next_node == NULL) {
        printf("the given next node cannot be NULL");
        return;
    }

    /* 2. allocate new node */
    struct Node* new_node = (struct Node*)malloc(sizeof(struct Node));

    /* 3. put in the data */
    new_node->data = new_data;

    /* 4. Make prev of new node as prev of next_node */
    new_node->prev = next_node->prev;

    /* 5. Make the prev of next_node as new_node */
    next_node->prev = new_node;

    /* 6. Make next_node as next of new_node */
    new_node->next = next_node;

    /* 7. Change next of new_node's previous node */
    if (new_node->prev != NULL)
        new_node->prev->next = new_node;
    /* 8. If the prev of new_node is NULL, it will be
       the new head node */
    else
        (*head_ref) = new_node;

}

// This function prints contents of linked list starting from the given node
void printList(struct Node* node)
{
    struct Node* last;
    printf("\nTraversal in forward direction \n");
    while (node != NULL) {
        printf(" %d ", node->data);
        last = node;
        node = node->next;
    }

    printf("\nTraversal in reverse direction \n");
    while (last != NULL) {
        printf(" %d ", last->data);
        last = last->prev;
    }
}

/* Driver program to test above functions*/
int main()
{
    /* Start with the empty list */
    struct Node* head = NULL;
    push(&head, 7);

    push(&head, 1);

    push(&head, 4);

    // Insert 8, before 1. So linked list becomes 4->8->1->7->NULL
    insertBefore(&head, head->next, 8);

    printf("Created DLL is: ");
    printList(head);

    getchar();
    return 0;
}

[Brad@Computer2 ~]$ 
[Brad@Computer2 ~]$ 
[Brad@Computer2 ~]$ 
[Brad@Computer2 ~]$ 
[Brad@Computer2 ~]$ tail[K[K[K[Kher[Kad -96[K[K86 tooling/example-samples/bb_dirs/b_acedemia/HowardULAB/Junior-Jolly-June/re[Ksyncd/[K[K[K[K[K[K[KCS211/Homework-2-28-19/D oubleList.cpp |tail -19
void list::printList(struct NODE* NODE){  
    struct NODE* last;  
    cout<<"Flight Records for HowardAir Flight CSCI0136:"<<endl;
    while (NODE != NULL) {  
        cout<< NODE->data << " to "<< NODE->data<<endl;  
        last = NODE;  
        NODE = NODE->next;  
        //cout<<NODE->data<<endl;
    }  
    cout<<""<<endl; 

    cout<<"Reverse Flight Records for HowardAir Flight CSCI0136:"<<endl;  
    while (last != NULL) {  
        cout<<last->data<< " to ";  
        //last = last->prev;  
        cout<<last->data<<endl; 
    }  
}

[Brad@Computer2 ~]$ cat /dev/clipboard

[Brad@Computer2 ~/<7>Homework-2-28-19/Fresh-trial]$ g++ -o dub dublyLL.cpp
[Brad@Computer2 ~/<7>Homework-2-28-19/Fresh-trial]$
[Brad@Computer2 ~/<7>Homework-2-28-19/Fresh-trial]$
[Brad@Computer2 ~/<7>Homework-2-28-19/Fresh-trial]$
[Brad@Computer2 ~/<7>Homework-2-28-19/Fresh-trial]$ ./dub.exe
Created DLL is:
Traversal in forward direction
 4  8  1  7
Traversal in reverse direction
 7  1  8  4
[Brad@Computer2 ~]$ 
[Brad@Computer2 ~]$ 
[Brad@Computer2 ~]$ 
[Brad@Computer2 ~]$ cat /dev/clipboard[21Ghead -86 tooling/example-samples/bb_dirs/b_acedemia/HowardULAB/Junior-Jolly-June/CS211/Homework-2-28-19/D oubleList.cpp | tail -19[K[K25[Acat tooling/example-samples/bb_dirs/b_acedemia/HowardULAB/Junior-Jolly-June/CS211/Homework-2-28-19/Fresh-otrial/dublyLL.cpp[K[A]$ head -86 tooling/example-samples/bb_dirs/b_acedemia/HowardULAB/Junior-Jolly-June/CS211/Homework-2-28-19/DtoubleList.cpp | tail -19[K[K24[K3[Ahead -86[P[125Goo[P[A[28G[P[125Guu[P[A[27G[125G[27G[1@9[125Gob[1@u[A[28G[125G[28G[1@0[125GDu[1@o[A[29G[125GDo
void list::printList(struct NODE* NODE){  
    struct NODE* last;  
    cout<<"Flight Records for HowardAir Flight CSCI0136:"<<endl;
    while (NODE != NULL) {  
        cout<< NODE->data << " to "<< NODE->data<<endl;  
        last = NODE;  
        NODE = NODE->next;  
        //cout<<NODE->data<<endl;
    }  
    cout<<""<<endl; 

    cout<<"Reverse Flight Records for HowardAir Flight CSCI0136:"<<endl;  
    while (last != NULL) {  
        cout<<last->data<< " to ";  
        //last = last->prev;  
        cout<<last->data<<endl; 
    }  
}

void list::deleteNode(struct NODE** headNode, struct NODE* del){ 
    if (*headNode == NULL || del == NULL) 
        return; 
  
[Brad@Computer2 ~]$ 
[Brad@Computer2 ~]$ 
[Brad@Computer2 ~]$ 
[Brad@Computer2 ~]$ 
[Brad@Computer2 ~]$ head -90 tooling/example-samples/bb_dirs/b_acedemia/HowardULAB/Junior-Jolly-June/CS211/Homework-2-28-19/D oubleList.cpp | tail -23[P[P[P[P[P[P[P[P[P[P[P[P[P[A[125G[K  [P[A[125GF|[1@ [1@r[1@e[9@sh-trial/[1@F[1@e[4@b28/[1@D[1@u[P[14@oubleList.cpp 

void list::printList(struct NODE* node){
    struct NODE* last;
    cout<<"Flight Records for HowardAir Flight CSCI0136:"<<endl;
    while (node->next != NULL) {
        cout<< node->data;
        last = node;
        node = node->next;
	if (node != NULL)
		cout << " to " << node->data << endl;
        //cout<<node->data<<endl;
    }
    cout<<endl<<endl<<endl<<endl;

    cout<<"Reverse Flight Records for HowardAir Flight CSCI0136:"<<endl;
    while (last->prev != NULL) {
        cout<<last->data;
        last = last->prev;
	if (last != NULL)
		cout << " to " << last->data << endl;
        //cout<<last->data<<endl;
    }
}
[Brad@Computer2 ~]$ ^Dexit
]0;~
[32mBrad@Computer2 [33m~[0m
$ exit

Script done on Mon, Mar 04, 2019  6:30:51 PM
